// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// templates/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6b\x1b\x3d\x10\xbd\x1b\xfc\x1f\x26\xba\xc4\x21\xd8\xfb\xe5\xf0\x95\x42\xa4\x2d\x6d\x28\xa4\xd0\xd2\x10\x1b\x7a\x34\x8a\x34\xeb\x55\xaa\x95\x16\x69\xd6\xd4\x84\xfc\xf7\xa2\xd5\x6e\xd6\xb8\x25\x84\xfa\x62\xe9\x69\xde\x68\xde\x1b\xcd\xf2\x33\xed\x15\x1d\x5a\x84\x9a\x1a\x5b\xce\x67\xf3\x19\x4f\x2b\xb0\xd2\xed\x04\x43\xc7\xca\x84\xa0\xd4\xe5\x7c\x06\xc0\x1b\x24\x09\xaa\x96\x21\x22\x09\xd6\x51\xb5\x7c\xcf\x7a\x16\x00\x27\x43\x16\xcb\x1f\x92\x54\x8d\x81\x17\x79\x3b\xb1\x9c\x6c\x50\x30\x8d\x51\x05\xd3\x92\xf1\x8e\x81\xf2\x8e\xd0\x91\x60\x9b\x1a\xe1\x76\xf3\xed\xeb\xff\x70\x8b\x41\x5a\xcd\xfe\xe0\xc9\x8e\x6a\x1f\x8e\x28\x6b\x43\x78\xe7\x8d\xa3\x97\xfb\xad\x71\x3f\x21\xa0\x15\x2c\xd2\xc1\x62\xac\x11\x89\x41\x1d\xb0\x12\x4c\xc5\x58\x64\x74\xa5\x62\xfc\xb0\x17\x57\xab\xff\x32\x91\x17\x83\xba\xf9\x8c\x3f\x78\x7d\x18\xb3\x55\x3e\x34\x60\xb4\x60\xca\x37\x8d\x74\x7a\x9b\x00\x06\x52\xa5\xd2\x5f\x50\x06\x0d\x52\xed\xb5\x60\x77\xdf\xd7\x9b\x5c\x76\xfa\xf1\xb6\x5c\xa3\xd3\x30\x84\xf1\xa2\x3d\x3e\x1a\x97\x00\x3c\xa2\x45\x45\x83\xc8\x21\x7a\xdd\x63\xec\x28\x0c\x80\xfb\xde\x33\xd8\x4b\xdb\xa1\x60\x01\x1f\xbc\x27\x56\xde\xf7\xff\xbc\xc8\xa7\xaf\x31\xa8\x0b\x6e\xeb\xdd\xd6\x57\x15\x2b\x37\x5d\x70\xe0\x5d\xe1\xab\xea\x2d\xdc\x5a\x06\xbd\xcd\x09\x12\xfb\x56\x06\x0d\xd4\xa7\xf8\x2b\x9f\x17\x59\xd5\x24\xb9\x97\xff\xaa\x01\xc9\xe9\x60\x76\xdb\xbc\x65\x83\x21\xc1\xec\xde\x60\x86\xb4\x96\x95\x1f\xad\xfd\xa7\x52\xb8\x71\x6d\x47\x90\x66\x40\xb0\xd8\x3d\x34\x86\xd8\x98\x38\xb5\x90\x95\x63\xf3\x78\x91\x9e\xc0\xf8\x3e\xce\x96\x4b\xe0\xf9\x2d\x43\x0c\x4a\xb0\xc7\x58\xe4\x6d\x5c\x3d\xc6\xc4\xca\xbb\x12\x96\xcb\x4c\x1f\x82\xf3\x4d\x84\xbf\xa8\x78\x94\x7b\x99\xd1\x51\x5f\xd5\xb9\xfe\x81\x41\x65\xac\xbd\x1f\xd5\x2f\x2e\xe0\x09\x20\x47\xec\x65\x80\x88\x16\x04\x68\xaf\xba\x06\x1d\xad\x76\x48\x9f\x2d\xa6\xe5\xa7\xc3\x17\xbd\x38\x9f\x7c\x3c\xbf\xb8\x1e\xa5\x2a\xef\x22\x41\x30\xbb\x78\xe3\x3b\x47\x20\xe0\xea\xdd\xcb\x61\xe5\xc3\x22\x25\x36\x09\xbe\x06\x03\x5c\x4c\xa1\xd7\x70\x79\x69\x2e\xe0\x69\x72\x35\x85\xfa\x96\x8e\x6b\x50\x01\x25\xe1\x50\xc6\xe2\x3c\x37\xe2\xe8\x7a\x48\x84\x95\x71\x0e\x43\x1a\x74\x10\x60\x4e\xce\x7a\xcf\x4f\xf0\x88\x76\x25\xdb\x16\x9d\xbe\xa9\x8d\xd5\x0b\xdf\xd2\x94\xf2\x39\x2d\x9e\xb3\x2f\x27\x76\xe5\x76\x0d\x0d\x48\x33\x3e\x4c\x36\x2f\xfa\xcf\x1c\xfc\x0e\x00\x00\xff\xff\x5d\xb4\xa5\x07\xf7\x04\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1271, mode: os.FileMode(438), modTime: time.Unix(1547850202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
